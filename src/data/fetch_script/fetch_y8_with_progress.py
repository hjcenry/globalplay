#!/usr/bin/env python3
"""
Y8 Games Áà¨Ëô´ËÑöÊú¨ - Â∏¶ÂÆûÊó∂ËøõÂ∫¶ÊòæÁ§∫
ÊäìÂèñ www.y8.com ÁÉ≠Èó®Ê∏∏ÊàèÊï∞ÊçÆÔºåÊòæÁ§∫ËØ¶ÁªÜËøõÂ∫¶‰ø°ÊÅØ
"""

import requests
from bs4 import BeautifulSoup
import json
import time
import re
import os
from datetime import datetime
from urllib.parse import urljoin, urlparse
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, NoSuchElementException

class Y8GamesCrawlerWithProgress:
    def __init__(self):
        self.base_url = "https://www.y8.com"
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Accept-Language': 'en-US,en;q=0.9,zh;q=0.8',
            'Accept-Encoding': 'gzip, deflate, br',
            'Connection': 'keep-alive',
            'Upgrade-Insecure-Requests': '1'
        })
        self.games = []
        self.progress_file = "progress.txt"
        self.start_time = None
        self.setup_selenium()
        
    def setup_selenium(self):
        """ËÆæÁΩÆ Selenium WebDriver"""
        chrome_options = Options()
        chrome_options.add_argument('--headless')
        chrome_options.add_argument('--no-sandbox')
        chrome_options.add_argument('--disable-dev-shm-usage')
        chrome_options.add_argument('--disable-gpu')
        chrome_options.add_argument('--window-size=1920,1080')
        chrome_options.add_argument('--disable-web-security')
        chrome_options.add_argument('--disable-features=VizDisplayCompositor')
        chrome_options.add_argument('--disable-logging')
        chrome_options.add_argument('--silent')
        chrome_options.add_argument('--lang=en-US')
        chrome_options.add_argument('--user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.0.0 Safari/537.36')
        
        # Á¶ÅÁî®ÂõæÁâáÂä†ËΩΩ‰ª•ÊèêÈ´òÈÄüÂ∫¶ÔºåÂπ∂ËÆæÁΩÆËØ≠Ë®ÄÂÅèÂ•Ω
        prefs = {
            "profile.managed_default_content_settings.images": 2,
            "profile.default_content_setting_values.notifications": 2,
            "intl.accept_languages": "en-US,en"
        }
        chrome_options.add_experimental_option("prefs", prefs)
        
        try:
            self.driver = webdriver.Chrome(options=chrome_options)
            print("‚úÖ Chrome WebDriver ÂàùÂßãÂåñÊàêÂäü")
        except Exception as e:
            print(f"‚ùå Chrome WebDriver ÂàùÂßãÂåñÂ§±Ë¥•: {e}")
            raise

    def write_progress(self, message):
        """ÂÜôÂÖ•ËøõÂ∫¶‰ø°ÊÅØÂà∞Êñá‰ª∂"""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        with open(self.progress_file, "a", encoding="utf-8") as f:
            f.write(f"[{timestamp}] {message}\n")
        print(f"[{timestamp}] {message}")

    def estimate_time_remaining(self, current_item, total_items, elapsed_time):
        """‰º∞ÁÆóÂâ©‰ΩôÊó∂Èó¥"""
        if current_item == 0:
            return "ËÆ°ÁÆó‰∏≠..."
        
        avg_time_per_item = elapsed_time / current_item
        remaining_items = total_items - current_item
        remaining_seconds = remaining_items * avg_time_per_item
        
        hours = int(remaining_seconds // 3600)
        minutes = int((remaining_seconds % 3600) // 60)
        seconds = int(remaining_seconds % 60)
        
        if hours > 0:
            return f"{hours}Â∞èÊó∂{minutes}ÂàÜÈíü"
        elif minutes > 0:
            return f"{minutes}ÂàÜÈíü{seconds}Áßí"
        else:
            return f"{seconds}Áßí"

    def extract_game_cards(self, page_num):
        """‰ªéÊåáÂÆöÈ°µÈù¢ÊèêÂèñÊ∏∏ÊàèÂç°Áâá‰ø°ÊÅØ"""
        url = f"https://www.y8.com/popular/games?page={page_num}&hl=en"
        self.write_progress(f"üîç Ê≠£Âú®ÊäìÂèñÁ¨¨ {page_num} È°µ: {url}")
        
        try:
            self.driver.get(url)
            WebDriverWait(self.driver, 10).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, "img.thumb.playable"))
            )
            time.sleep(2)
            
            html = self.driver.page_source
            soup = BeautifulSoup(html, 'html.parser')
            
            game_cards = soup.find_all('img', class_='thumb playable')
            self.write_progress(f"üìã Âú®Á¨¨ {page_num} È°µÊâæÂà∞ {len(game_cards)} ‰∏™Ê∏∏Êàè")
            
            page_games = []
            for card in game_cards:
                try:
                    game_title = card.get('alt', '').strip()
                    if not game_title:
                        continue
                        
                    thumbnail = card.get('src') or card.get('data-src', '')
                    parent_link = card.find_parent('a')
                    if not parent_link:
                        continue
                        
                    game_link = parent_link.get('href', '')
                    if game_link.startswith('/'):
                        game_link = urljoin(self.base_url, game_link)
                    
                    # Ê∑ªÂä†Ëã±ÊñáÂèÇÊï∞
                    if '?' in game_link:
                        game_link += '&hl=en'
                    else:
                        game_link += '?hl=en'
                    
                    slug = game_link.split('/')[-1].split('?')[0] if game_link else ''
                    
                    if game_title and game_link and slug:
                        page_games.append({
                            'title': game_title,
                            'slug': slug,
                            'game_link': game_link,
                            'thumbnail': thumbnail
                        })
                        
                except Exception as e:
                    self.write_progress(f"‚ö†Ô∏è Â§ÑÁêÜÊ∏∏ÊàèÂç°ÁâáÊó∂Âá∫Èîô: {e}")
                    continue
            
            return page_games
            
        except TimeoutException:
            self.write_progress(f"‚ùå Á¨¨ {page_num} È°µÂä†ËΩΩË∂ÖÊó∂")
            return []
        except Exception as e:
            self.write_progress(f"‚ùå ÊäìÂèñÁ¨¨ {page_num} È°µÊó∂Âá∫Èîô: {e}")
            return []

    def extract_game_details(self, game_info):
        """‰ªéÊ∏∏ÊàèËØ¶ÊÉÖÈ°µÊèêÂèñËØ¶ÁªÜ‰ø°ÊÅØ"""
        game_url = game_info['game_link']
        
        try:
            self.driver.get(game_url)
            WebDriverWait(self.driver, 10).until(
                EC.presence_of_element_located((By.TAG_NAME, "body"))
            )
            time.sleep(2)
            
            html = self.driver.page_source
            soup = BeautifulSoup(html, 'html.parser')
            
            # Êü•Êâæ iframe
            iframe = soup.find('iframe', {'id': 'item-direct-container'})
            if not iframe:
                iframe = soup.find('iframe', class_='item-direct-container')
            
            if not iframe:
                return None
                
            iframe_src = iframe.get('src') or iframe.get('data-src', '')
            if not iframe_src:
                return None
            
            # ÊèêÂèñÊ∏∏ÊàèÊèèËø∞ - ‰ΩøÁî®Ê≠£Á°ÆÁöÑÈÄâÊã©Âô®
            description = ""
            desc_selectors = [
                'h2.ltr.description',
                'div.item-description',
                'div.description',
                '.game-description',
                'meta[name="description"]'
            ]
            
            for selector in desc_selectors:
                if selector.startswith('meta'):
                    desc_elem = soup.find('meta', {'name': 'description'})
                    if desc_elem:
                        description = desc_elem.get('content', '').strip()
                        break
                else:
                    desc_elem = soup.select_one(selector)
                    if desc_elem:
                        description = desc_elem.get_text().strip()
                        break
            
            if not description:
                description = f"Play {game_info['title']} - an exciting game from Y8!"
            
            # ÁîüÊàêÁÆÄÁü≠ÊèèËø∞
            if description and len(description) > 150:
                short_desc = description[:147] + "..."
                if '. ' in short_desc:
                    sentences = short_desc.split('. ')
                    if len(sentences) > 1:
                        short_desc = sentences[0] + '.'
            else:
                short_desc = description
            
            # ÊèêÂèñËØÑÂàÜ
            rating = 4.0
            rating_selectors = ['.rating-value', '.score', '.rating']
            
            for selector in rating_selectors:
                rating_elem = soup.select_one(selector)
                if rating_elem:
                    try:
                        rating_text = rating_elem.get_text().strip()
                        rating_match = re.search(r'(\d+\.?\d*)', rating_text)
                        if rating_match:
                            rating = float(rating_match.group(1))
                            if rating > 5:
                                rating = rating / 20
                            break
                    except:
                        continue
            
            # ÊèêÂèñÂàÜÁ±ª
            category = "action"
            category_selectors = ['.category', '.genre', 'meta[property="game:category"]']
            
            for selector in category_selectors:
                if selector.startswith('meta'):
                    cat_elem = soup.find('meta', {'property': 'game:category'})
                    if cat_elem:
                        category = cat_elem.get('content', '').lower()
                        break
                else:
                    cat_elem = soup.select_one(selector)
                    if cat_elem:
                        category = cat_elem.get_text().strip().lower()
                        break
            
            # Êò†Â∞ÑÂà∞Ê†áÂáÜÂàÜÁ±ª
            category_mapping = {
                'action': 'action', 'puzzle': 'puzzle', 'strategy': 'strategy',
                'racing': 'racing', 'adventure': 'adventure', 'shooting': 'shooting',
                'sport': 'action', 'arcade': 'action', 'platform': 'action', 'rpg': 'adventure'
            }
            
            for key in category_mapping:
                if key in category:
                    category = category_mapping[key]
                    break
            else:
                category = 'action'
            
            # ÁîüÊàêÊ∏∏ÊàèÊï∞ÊçÆ
            game_data = {
                'id': game_info['slug'],
                'slug': game_info['slug'],
                'title': game_info['title'],
                'description': description,
                'shortDescription': short_desc,
                'category': category,
                'thumbnail': f"/images/games/y8/{game_info['slug']}.jpg",
                'gameUrl': iframe_src,
                'rating': round(rating, 1),
                'playCount': self.generate_play_count(),
                'tags': [category, "y8", "popular"],
                'controls': 'Keyboard & Mouse',
                'featured': False,
                'trending': True,
                'isNew': False
            }
            
            return game_data
            
        except Exception as e:
            self.write_progress(f"‚ùå Ëé∑ÂèñÊ∏∏ÊàèËØ¶ÊÉÖÂ§±Ë¥• {game_info['title']}: {e}")
            return None

    def generate_play_count(self):
        """ÁîüÊàêÈöèÊú∫ÁöÑÊ∏∏ÊàèÊ¨°Êï∞"""
        import random
        return random.randint(15000, 200000)

    def download_image(self, image_url, save_path):
        """‰∏ãËΩΩÊ∏∏ÊàèÂ∞ÅÈù¢ÂõæÁâá"""
        try:
            if not image_url:
                return False
                
            response = self.session.get(image_url, timeout=10)
            response.raise_for_status()
            
            os.makedirs(os.path.dirname(save_path), exist_ok=True)
            
            with open(save_path, 'wb') as f:
                f.write(response.content)
            
            return True
            
        except Exception as e:
            return False

    def crawl_all_pages(self, start_page=1, end_page=9):
        """Áà¨ÂèñÊâÄÊúâÈ°µÈù¢ÁöÑÊ∏∏Êàè"""
        self.start_time = time.time()
        
        # Ê∏ÖÁ©∫ËøõÂ∫¶Êñá‰ª∂
        with open(self.progress_file, "w", encoding="utf-8") as f:
            f.write("")
        
        self.write_progress(f"üöÄ ÂºÄÂßãÁà¨Âèñ Y8 Ê∏∏ÊàèÁΩëÁ´ô (Á¨¨ {start_page}-{end_page} È°µ)")
        
        all_game_cards = []
        
        # Ê≠•È™§1: Êî∂ÈõÜÊâÄÊúâÊ∏∏ÊàèÂç°Áâá‰ø°ÊÅØ
        for page in range(start_page, end_page + 1):
            page_games = self.extract_game_cards(page)
            all_game_cards.extend(page_games)
            time.sleep(2)
        
        total_games = len(all_game_cards)
        self.write_progress(f"üìä ÊÄªÂÖ±Êî∂ÈõÜÂà∞ {total_games} ‰∏™Ê∏∏ÊàèÂç°Áâá")
        
        # Ê≠•È™§2: Ëé∑ÂèñÊØè‰∏™Ê∏∏ÊàèÁöÑËØ¶ÁªÜ‰ø°ÊÅØ
        successful_games = []
        failed_games = []
        
        for i, game_info in enumerate(all_game_cards, 1):
            current_time = time.time()
            elapsed_time = current_time - self.start_time
            time_remaining = self.estimate_time_remaining(i-1, total_games, elapsed_time)
            
            self.write_progress(f"üìù ËøõÂ∫¶: {i}/{total_games} ({i/total_games*100:.1f}%) - {game_info['title']}")
            self.write_progress(f"‚è±Ô∏è È¢ÑËÆ°Ââ©‰ΩôÊó∂Èó¥: {time_remaining}")
            
            game_data = self.extract_game_details(game_info)
            if game_data:
                # ‰∏ãËΩΩÂõæÁâá
                if game_info['thumbnail']:
                    image_path = f"public/images/games/y8/{game_info['slug']}.jpg"
                    self.download_image(game_info['thumbnail'], image_path)
                
                successful_games.append(game_data)
                self.write_progress(f"‚úÖ ÊàêÂäüÂ§ÑÁêÜ: {game_info['title']}")
            else:
                failed_games.append(game_info)
                self.write_progress(f"‚ùå Â§ÑÁêÜÂ§±Ë¥•: {game_info['title']}")
            
            time.sleep(1)
        
        self.games = successful_games
        
        total_time = time.time() - self.start_time
        self.write_progress(f"\nüéØ Áà¨ÂèñÂÆåÊàê! ÊÄªËÄóÊó∂: {total_time/60:.1f} ÂàÜÈíü")
        self.write_progress(f"‚úÖ ÊàêÂäü: {len(successful_games)} ‰∏™Ê∏∏Êàè")
        self.write_progress(f"‚ùå Â§±Ë¥•: {len(failed_games)} ‰∏™Ê∏∏Êàè")
        self.write_progress(f"üìà ÊàêÂäüÁéá: {len(successful_games)/total_games*100:.1f}%")

    def save_to_json(self, filename="y8_games.json"):
        """‰øùÂ≠òÊï∞ÊçÆ‰∏∫ JSON Êñá‰ª∂"""
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(self.games, f, ensure_ascii=False, indent=2)
            self.write_progress(f"‚úÖ Êï∞ÊçÆÂ∑≤‰øùÂ≠òÂà∞ {filename}")
        except Exception as e:
            self.write_progress(f"‚ùå ‰øùÂ≠òÊñá‰ª∂Â§±Ë¥•: {e}")

    def close(self):
        """ÂÖ≥Èó≠ WebDriver"""
        if hasattr(self, 'driver'):
            self.driver.quit()
            self.write_progress("üîí WebDriver Â∑≤ÂÖ≥Èó≠")

def main():
    crawler = Y8GamesCrawlerWithProgress()
    
    try:
        crawler.crawl_all_pages(start_page=1, end_page=9)
        crawler.save_to_json("y8_games.json")
        crawler.write_progress(f"\nüéâ ‰ªªÂä°ÂÆåÊàê! ÂÖ±Áà¨Âèñ {len(crawler.games)} ‰∏™ Y8 Ê∏∏Êàè")
        
    except KeyboardInterrupt:
        crawler.write_progress("\n‚ö†Ô∏è Áî®Êà∑‰∏≠Êñ≠Êìç‰Ωú")
    except Exception as e:
        crawler.write_progress(f"\n‚ùå Âá∫Áé∞ÈîôËØØ: {e}")
    finally:
        crawler.close()

if __name__ == "__main__":
    main() 